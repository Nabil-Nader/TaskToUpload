import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

public class Main {
	
	public static final String DATE_FORMATE = "dd-M-yyyy hh:mm:ss a z ";

	public static void main(String[] args) {
		// TODO Auto-generated method stub

//		 initialize LocalDatetime
		LocalDateTime f = LocalDateTime.now();
		
		DateTimeFormatter df = DateTimeFormatter.ofPattern(DATE_FORMATE);
		System.out.println(df);
		System.out.println(f.format(df));
		 
		
//		System.out.println(f);
		
		Date date = new Date();
		
		long time = date.getTime();
	 
		
		Timestamp ts = new Timestamp(time);
//		System.out.println(ts);
		
		converDateTime(" ");
//		zone();
 	}
	
	
	/*
	 * Description: Method convert the  current timestamp to UTC DateTime.
	 */
	
	public static void showeUtcDate(LocalDate timeStamp) {
		
	}
	
	/*
	 * Description: Method convert time zone from EGY to UTC
	 */
	
	public static void converDateTime(String zone) {
		LocalDateTime ldt = LocalDateTime.now();
		System.out.println(ldt);
 
		ZonedDateTime zdt = ZonedDateTime.of(ldt, ZoneId.of("Egypt"));
		System.out.println(zdt);
		
		zdt = ZonedDateTime.of(ldt, ZoneId.of("Asia/Omsk"));
		DateTimeFormatter df = DateTimeFormatter.ofPattern(DATE_FORMATE);
		
		
		System.out.println(zdt.format(df));
	}
	
	public static void zone() {
		
		 DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_FORMATE);

		 
		ZoneId fromTimeZone = ZoneId.of("Asia/Kolkata");    //Source timezone
        ZoneId toTimeZone = ZoneId.of("America/New_York");  //Target timezone
         
        LocalDateTime today = LocalDateTime.now();          //Current time
         
        //Zoned date time at source timezone
        ZonedDateTime currentISTime = today.atZone(fromTimeZone);       
         
        //Zoned date time at target timezone
        ZonedDateTime currentETime = currentISTime.withZoneSameInstant(toTimeZone);
         
        //Format date time - optional
        System.out.println(formatter.format(currentISTime));
        System.out.println(formatter.format(currentETime));	
	}

}
